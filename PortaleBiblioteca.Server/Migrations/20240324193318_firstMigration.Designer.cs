// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortaleBiblioteca.Server.Data;

#nullable disable

namespace PortaleBiblioteca.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240324193318_firstMigration")]
    partial class firstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PortaleBiblioteca.Book", b =>
                {
                    b.Property<int>("IdBooks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBooks"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoanQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdBooks");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Aisle", b =>
                {
                    b.Property<int>("IdAisle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAisle"));

                    b.Property<int>("AisleNumber")
                        .HasColumnType("int");

                    b.HasKey("IdAisle");

                    b.ToTable("Aisles");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Attendance", b =>
                {
                    b.Property<int>("IdAttendance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAttendance"));

                    b.Property<int?>("EventIdEvent")
                        .HasColumnType("int");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int?>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdAttendance");

                    b.HasIndex("EventIdEvent");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Event", b =>
                {
                    b.Property<int>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvent"));

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EventPrice")
                        .HasColumnType("float");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEvent");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Loan", b =>
                {
                    b.Property<int>("IdLoan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLoan"));

                    b.Property<int?>("BookIdBooks")
                        .HasColumnType("int");

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdLoan");

                    b.HasIndex("BookIdBooks");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Location", b =>
                {
                    b.Property<int>("IdLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLocation"));

                    b.Property<int?>("BookIdBooks")
                        .HasColumnType("int");

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<int>("IdShelf")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfIdShelf")
                        .HasColumnType("int");

                    b.HasKey("IdLocation");

                    b.HasIndex("BookIdBooks");

                    b.HasIndex("ShelfIdShelf");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Review", b =>
                {
                    b.Property<int>("IdReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReview"));

                    b.Property<int?>("BookIdBooks")
                        .HasColumnType("int");

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("ReviewBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdReview");

                    b.HasIndex("BookIdBooks");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Shelf", b =>
                {
                    b.Property<int>("IdShelf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdShelf"));

                    b.Property<int?>("AisleIdAisle")
                        .HasColumnType("int");

                    b.Property<int>("IdAisle")
                        .HasColumnType("int");

                    b.Property<int>("ShelfBay")
                        .HasColumnType("int");

                    b.Property<int>("ShelfHeight")
                        .HasColumnType("int");

                    b.HasKey("IdShelf");

                    b.HasIndex("AisleIdAisle");

                    b.ToTable("Shelfs");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Attendance", b =>
                {
                    b.HasOne("PortaleBiblioteca.Server.Data.Models.Event", null)
                        .WithMany("Participants")
                        .HasForeignKey("EventIdEvent");

                    b.HasOne("PortaleBiblioteca.Server.Data.Models.User", null)
                        .WithMany("Attendances")
                        .HasForeignKey("UserIdUser");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Loan", b =>
                {
                    b.HasOne("PortaleBiblioteca.Book", null)
                        .WithMany("Loans")
                        .HasForeignKey("BookIdBooks");

                    b.HasOne("PortaleBiblioteca.Server.Data.Models.User", null)
                        .WithMany("Prestiti")
                        .HasForeignKey("UserIdUser");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Location", b =>
                {
                    b.HasOne("PortaleBiblioteca.Book", null)
                        .WithMany("Locations")
                        .HasForeignKey("BookIdBooks");

                    b.HasOne("PortaleBiblioteca.Server.Data.Models.Shelf", null)
                        .WithMany("Locations")
                        .HasForeignKey("ShelfIdShelf");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Review", b =>
                {
                    b.HasOne("PortaleBiblioteca.Book", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BookIdBooks");

                    b.HasOne("PortaleBiblioteca.Server.Data.Models.User", null)
                        .WithMany("Recensioni")
                        .HasForeignKey("UserIdUser");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Shelf", b =>
                {
                    b.HasOne("PortaleBiblioteca.Server.Data.Models.Aisle", null)
                        .WithMany("Shelfs")
                        .HasForeignKey("AisleIdAisle");
                });

            modelBuilder.Entity("PortaleBiblioteca.Book", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("Locations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Aisle", b =>
                {
                    b.Navigation("Shelfs");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.Shelf", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("PortaleBiblioteca.Server.Data.Models.User", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Prestiti");

                    b.Navigation("Recensioni");
                });
#pragma warning restore 612, 618
        }
    }
}
